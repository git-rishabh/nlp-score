An Introduction to Object Orientated Programming
A ‘class’ is a software design which
describes the general properties of
something which the software is
modelling.
Individual ‘objects’ are
created from the class
design for each actual
thing
Class
Object 2
Object 1
Object 3
However deciding just what classes we should create in our system is not a trivial task as the real world
is complex and messy (see chapter 6 for more advice on how to go about this). In essence we need to
create an abstract model of the real world that focuses on the essential aspects of a problem and ignores
irrelevant complexities. For example in the real world bank account holders sometimes need to borrow
money and occasionally their money may get stolen by a pick pocket. If we were to create a bank account
system should we allow customers to borrow money? Should we acknowledge that their cash may get
stolen and build in some method of them getting an immediate loan – or is this an irrelevant detail that
would just add complexity to the system and provide no real benefit to the bank?
Using object oriented analysis and design techniques our job would be to look at the real world and
come up with a simplified abstract model that we could turn into a computer system. How good our
final system is will depend upon how good our software model is.
Software
Model
Real
World
21
Download free eBooks at bookboon.comObject Oriented Programming Using Java
An Introduction to Object Orientated Programming
Activity 9
Consider a computer system that will allow items to be reserved from a library. Imagine one
such item that you may like to reserve and list two or three things that a librarian may want to
know about this item.
Feedback 9
You may have thought of a book you wish to reserve in which case the librarian may need to
know the title of the book and its author.
Thus for every object we create in a system we need to define the attributes of that object i.e. the
things we need to know about it.
Activity 10
Note that we can consider a reservation to be is an intellectual object (where the actual item is a
physical object). Considering this intellectual object (item reservation) list two or three actions the
librarian may need to perform on this object.
Life Science in Umeå – your choice!
• 31 000 students • world class research • top class teachers
• modern campus • ranked nr 1 by international students
– International Bachelor’s programme in Life Science
– Master’s programme in Chemistry
– Master’s programme in Molecular Biology
Sweden
www.teknat.umu.se/english
22
Download free eBooks at bookboon.com
APPLY
NOW!
Click on the ad to read moreObject Oriented Programming Using Java
An Introduction to Object Orientated Programming
Feedback 10
The librarian may need to cancel this reservation (if you change your mind) they may also need to
tell you if the item has arrived in stock for you to collect.
Thus for each object we need to define the operations that will be performed on that object (as
well as its attributes).
Activity 11
Considering the most general category of object that can be borrowed from a library, a ‘loan item’,
list two or three more specific subcategory of object a library can lend out.
Feedback 11
Having defined the most general category of object (we call this a class) – something that can be
borrowed – we may want to define more specialised sub-classes (e.g. books, magazines, audio/
visual material). These will share the attributes defined for the general class but will have specific
differences (for example there could be a charge for borrowing audio/visual items).
1.6	
The Benefits of the Object Oriented Programming Approach
Whether or not you develop programs in an object oriented way, before you write the software you must
first develop a model of what that software must be able to do and how it should work. Object oriented
modelling is based on the ideas of abstraction, encapsulation, inheritance and polymorphism.
The general proponents of the object oriented approach claims that this model provides:
•	 better abstractions (modelling information and behaviour together)
•	 better maintainability (more comprehensible, less fragile)
•	 better reusability (classes as encapsulated components)
We will return to look at these claims later in Chapter 11 as we see a case study showing in detail how
object oriented analysis works and how the resultant models can be implemented in an object oriented
programming language (i.e. Java).
1.7	Summary
Object oriented programming involves the creation of classes by modelling the real world. This allows
more specialised classes to be created that inherit the behaviour of the generalised classes. Polymorphic
behaviour means that systems can be changed, as business needs change, by adding new specialised
classes and these classes can be accessed by the rest of the system without any regard to their specialised
behaviour and without changing other parts of the current system.
23
Download free eBooks at bookboon.comObject Oriented Programming Using Java
The Unified Modelling Language (UML)
2	The Unified Modelling
Language (UML)
Introduction
This chapter will introduce you to the roles of the Unified Modelling Language (UML) and explain the
purpose of four of the most common diagrams (class diagrams, object diagrams, sequence diagrams
and package diagrams). Particular emphasis will be placed on class diagrams as these are the most used
part of the UML notation.
Objectives
By the end of this chapter you will be able to...
•	 Explain what UML is and explain the role of four of the most common diagrams,
•	 Draw class diagrams, object diagrams, sequence diagrams and package diagrams.
The material covered in this chapter will be expanded on throughout later chapters of the book and the
skills developed here will be used in later exercises (particularly regarding class diagrams.
This chapter consists of six sections:-
1)	 An introduction to UML
2)	 UML Class Diagrams
3)	 UML Syntax
4)	 UML Package Diagrams
5)	 UML Object diagrams
6)	 UML Sequence Diagrams
2.1	
An Introduction to UML
The Unified Modelling Language, UML, is sometimes described as though it was a methodology. It is not!
A methodology is a system of processes in order to achieve a particular outcome e.g. an organised
sequence of activities in order to gather user requirements. UML on the other hand a precise diagramming
notation that will allow program designs to be represented and discussed. As it is graphical in nature it
becomes easy to visualise, understand and discuss the information presented in the diagram. However
as the diagrams represent technical information they must be precise and clear – in order for them to
work therefore there is a precise notation that must be followed.
24
Download free eBooks at bookboon.comObject Oriented Programming Using Java
The Unified Modelling Language (UML)
As UML is not a methodology it is left to the user to follow whatever processes they deem appropriate
in order to generate the designs described by the diagrams. UML does not constrain this – it merely
allows those designs to be expressed in an easy to use, but precise, graphical notation.
2.2	
UML Class diagrams
Classes are the basic components of any object oriented software system and UML class diagrams provide
an easy way to represent these. As well as showing individual classes, in detail, class diagrams show
multiple classes and how they are related to each other. Thus a class diagram shows the architecture of
a system.
A class consists of:-
•	 a unique name (conventionally starting with an uppercase letter)
•	 a list of attributes (int, double, boolean, String etc)
•	 a list of methods
INNOVATIVE
LIKE YOU.
If you’re hoping for a truly modern education, one where you’re
encouraged to speak your mind and to think long-term, both when
it comes to your own future and the future of the planet. Then the
University of Gothenburg is the place for you.
Study a Master’s programme in Gothenburg, Sweden | www.gu.se/education
25
Download free eBooks at bookboon.com
Click on the ad to read moreObject Oriented Programming Using Java
The Unified Modelling Language (UML)
This is shown in a simple box structure...
ClassName
attributes
methods()
For attributes and methods visibility modifiers are shown (+ for public access, – for private access).
Attributes normally being kept private and methods normally made public.
Note: String shown above is not a primitive data type but is itself a class. Hence it starts with a capital letter.
Thus a class Book, with String attributes of title and author, and the following methods setTitle(),
getTitle(), setAuthor(), getAuthor() and toString() would be shown as...
Book
- title :String
- author :String
+setTitle()
+getTitle()
+setAuthor()
+getAuthor()
+toString()
Activity 1
Draw a diagram to represent a class called ‘BankAccount’ with the attribute balance (of type int)
and methods depositMoney() and withdrawMoney(). Show appropriate visibility modifiers.
26
Download free eBooks at bookboon.comObject Oriented Programming Using Java
The Unified Modelling Language (UML)
Feedback 1
BankAccount
- balance :int
+depositMoney()
+withdrawMoney()
+displayBalance()
The diagram above shows this information
UML allows us to suppress any information we do not wish to highlight in our diagrams – this allows
us to suppress irrelevant detail and bring to the readers attention just the information we wish to focus
on. Therefore the following are all valid class diagrams...
Firstly with the access modifiers not shown...
BankAccount
balance :int
depositMoney()
withdrawMoney()
displayBalance()
Secondly with the access modifiers and the data type not shown...
BankAccount
balance :int
depositMoney()
withdrawMoney()
displayBalance()
27
Download free eBooks at bookboon.comObject Oriented Programming Using Java
The Unified Modelling Language (UML)
And finally with the attributes and methods not shown...
BankAccount
i.e. there is a class called ‘BankAccount’ but the details of this are not being shown.
Of course virtually all Java programs will be made up of many classes and classes will relate to each
other – some classes will make use of other classes. These relationships are shown by arrows. Different
type of arrow indicate different relationships (including inheritance and aggregation relationships).
In addition to this class diagrams can make use of keywords, notes and comments.
As we will see in examples that follow, a class diagram can show the following information:-
•	 Classes
- - attributes
- - operations
- - visibility
Scholarships
Open your mind to
new opportunities
With 31,000 students, Linnaeus University is
one of the larger universities in Sweden. We
are a modern university, known for our strong
international profile. Every year more than
1,600 international students from all over the
world choose to enjoy the friendly atmosphere
and active student life at Linnaeus University.
Welcome to join us!
Bachelor programmes in
Business & Economics | Computer Science/IT |
Design | Mathematics
Master programmes in
Business & Economics | Behavioural Sciences | Computer
Science/IT | Cultural Studies & Social Sciences | Design |
Mathematics | Natural Sciences | Technology & Engineering
Summer Academy courses
28
Download free eBooks at bookboon.com
Click on the ad to read moreObject Oriented Programming Using Java
The Unified Modelling Language (UML)
•	 Relationships
- - navigability
- - multiplicity
- - dependency
- - aggregation
- - composition
•	 Generalization / specialization
- - inheritance
- - interfaces
•	 Keywords
•	 Notes and Comments
2.3	
UML Syntax
As UML diagrams convey precise information there is a precise syntax that should be followed.
Attributes should be shown as:   visibility name:   type multiplicity
Where visibility is one of:-
- - ‘+’ public
- - ‘-’ private
- - ‘#’ protected
- - ‘~’ package
and Multiplicity is one of:-
- - ‘n’ exactly n
- - ‘*’ zero or more
- - ‘m..‘n’ between m and n
The following are examples of attributes correctly specified using UML:-
- custRef: int [1]
a private attribute custRef is a single int value
this would often be shown as – custRef: int However with no multiplicity shown we cannot
safely assume a multiplicity of one was intended by the author.
29
Download free eBooks at bookboon.comObject Oriented Programming Using Java
The Unified Modelling Language (UML)
# itemCodes: String [1..*]
a protected attribute itemCodes is one or more String values
validCard: boolean
an attribute validCard, of unspecified visibility, has unspecified multiplicity
Operations also have a precise syntax and should be shown as:
visibility name (par1: type1, par2: type2): returntype
where each parameter is shown (in parenthesis) and then the return type is specified.
An example would be
+ addName (newName: String): boolean
This denotes a public method ‘addName’ which takes one parameter ‘newName’ of type String and
returns a boolean value.
Activity 2
Draw a diagram to represent a class called ‘BankAccount’ with a private attribute balance (this
being a single integer) and a public method depositMoney() which takes an integer parameter,
‘deposit’ and returns a boolean value. Fully specify all of this information on a UML class diagram.
Feedback 2
The diagram below shows this information
BankAccount
- balance :int[1]
+depositMoney(deposit :int) : boolean
Denoting Relationships
As well as denoting individual classes, Class diagrams denote relationships between classes. One such
relationships is called an ‘Association’.
30
Download free eBooks at bookboon.comObject Oriented Programming Using Java
The Unified Modelling Language (UML)
In a class attributes will be defined. These could be primitive data types (int, boolean etc.) however
attributes can also be complex objects as defined by other classes.
OneClass
value : OtherClass
Thus the figure above shows a class ‘OneClass’ that has an attribute ‘value’. This value is not a primitive
data type but is an object of type defined by ‘OtherClass’.
We could denote exactly the same information by the diagram below.
value
OneClass
OtherClass
We use an association when we want to give two related classes, and their relationship, prominence on
a class diagram
The ‘source’ class points to the ‘target’ class.
AXA Global
Graduate Program
Find out more and apply
31
Download free eBooks at bookboon.com
Click on the ad to read moreObject Oriented Programming Using Java
The Unified Modelling Language (UML)
Strictly we could use an association when a class we define has a String instance variable – but we would
not do this because the String class is part of the Java platform and ‘taken for granted’ like an attribute
of a primitive type. This would generally be true of all library classes unless we are drawing the diagram
specifically to explain some aspect of the library class for the benefit of someone unfamiliar with its
purpose and functionality.
Additionally we can show multiplicity at both ends of an association:
1
1..*
OtherClass
OneClass
This implies that ‘OneClass’ maintains a collection of objects of type ‘OtherClass’. Collections are an
important part of the Java framework that we will look at the use of collections in Chapter 7.
Activity 3
Draw a diagram to represent a class called ‘Catalogue’ and a class called ‘ItemForSale’ as defined
below:-
ItemForSale has an attribute ‘name’ of type string and an attribute ‘price’ of type int. It also has a
method setPrice() which takes an integer parameter ‘newPrice’.
‘Catalogue’ has an attribute ‘listOfItems’ i.e. the items currently held in the catalogue. As zero
or more items can be stored in the catalogue ‘listOfItems’ will need to be an array or collection.
‘Catalogue’ also has one method addItem() which takes an ‘item’ as a parameter (of type
ItemForSale) and adds this item to the ‘listOfItems’.
Draw this on a class diagram showing appropriate visibility modifiers for attributes and methods.
Feedback 3
The diagram below shows this information
Catalogue
ItemForSale
0..*
1
+addItem(item :ItemForSale)
listOfItems
- name :String
- price : int
+setPrice(newPrice :int)
32
Download free eBooks at bookboon.comObject Oriented Programming Using Java
The Unified Modelling Language (UML)
Note: All class names begin in uppercase, attribute and method names begin in lowercase. Also note
that the class ItemForSale describes a single item (not multiple items). ‘listOfItems’ however maintains
a list of zero or more individual objects.
Types of Association
There are various different types of association denoted by different arrows:-
•	 Dependency,
•	 Simple association
•	 Bidirectional association
•	 Aggregation and
•	 Composition
Class A Class B Dependency
Class A Class B Simple association
(navigable from A
to B)
Class A Class B Bidirectional
association
Class A Class B Aggregation
Class A Class B Composition
Dependency
Class A
Class B
•	 Dependency is the most unspecific relationship between classes (not strictly an ‘association’)
•	 Class A in some way uses facilities defined by Class B
•	 Changes to Class B may affect Class A
33
Download free eBooks at bookboon.comObject Oriented Programming Using Java
The Unified Modelling Language (UML)
Typical use of dependency lines would be where Class A has a method which is passed a parameter
object of Class B, or uses a local variable of that class, or calls ‘static’ methods in Class B.
Simple Association
Class A
Class B
•	 In an association Class A ‘uses’ objects of Class B
•	 Typically Class A has an attribute of Class B
•	 Navigability is from A to B:
i.e. A Class A object can access the Class B object(s) with which it is associated. The reverse
is not true – the Class B object doesn’t ‘know about’ the Class A object
A simple association typically corresponds to an instance variable in Class A of the target class B type.
Example: the Catalogue above needs access to 0 or more ItemsForSale so items can be added or removed
from a Catalogue. An ItemForSale does not need to access a Catalogue in order to set its price or
perform some other method associated with the item itself.
.
34
Download free eBooks at bookboon.com
Click on the ad to read moreObject Oriented Programming Using Java
The Unified Modelling Language (UML)
Bidirectional Association
Class A
Class B
•	 Bidirectional Association is when Classes A and B have a two-way association
•	 Each refers to the other class
•	 Navigability A to B and B to A:
- - A Class A object can access the Class B object(s) with which it is associated
- - Object(s) of Class B ‘belong to’ Class A
- - Implies reference from A to B
- - Also, a Class B object can access the Class A object(s) with which it is associated
A bidirectional association is complicated because each object must have a reference to the other object(s)
and generally bidirectional associations are much less common than unidirectional ones.
An example of a bidirectional association may between a ‘Degree’ and ‘Student’. ie. given a Degree we
may wish to know which Students are studying on that Degree. Alternatively starting with a student we
may wish to know the Degree they are studying.
'HJUHH


6WXGHQW
As many students study the same Degree at the same time, but students usually only take one Degree
there is still a one to many relationship here.
Aggregation
&ODVV%
&ODVV$
•	 Aggregation denotes a situation where Object(s) of Class B ‘belong to’ Class A
•	 Implies reference from A to B
•	 While aggregation implies that objects of Class B belong to objects of Class A it also implies
that object of Class B retain an existence independent of Class A. Some designers believe
there is no real distinction between aggregation and simple association
35
Download free eBooks at bookboon.comObject Oriented Programming Using Java
The Unified Modelling Language (UML)
An example of aggregation would be between a Class Car and a Class Tyre
7\UH
&DU
We think of the tyres as belonging to the car they are on, but at the garage they may be removed and
placed on a rack to be repaired. Their existence isn’t dependent on the existence of a car with which
they are associated.
Composition
&ODVV%
&ODVV$
•	 Composition is similar to aggregation but implies a much stronger belonging relationship
i.e. Object(s) of Class B are ‘part of ’ a Class A object
•	 Again implies reference from A to B
•	 Much ‘stronger’ than aggregation in this case Class B objects are an integral part of Class A
and in general objects of Class B never exist other than as part of Class A, i.e. they have the
same ‘lifetime’
An example of composition would be between Points, Lines and Shapes as elements of a Picture. These
objects can only exist as part of a picture, and if the picture is deleted they are also deleted.
As well as denoting associations, class diagrams can denote:-
•	 Inheritance,
•	 Interfaces,
•	 Keywords and
•	 Notes
Inheritance
&ODVV$
&ODVV%
•	 Aside from associations, the other main modelling relationship is inheritance:
•	 Class A ‘inherits’ both the interface and implementation of Class B, though it may override
implementation details and supplement both.
We will look at inheritance in detail in Chapter 3.
36
Download free eBooks at bookboon.comObject Oriented Programming Using Java
The Unified Modelling Language (UML)
Interfaces
•	 Interfaces are similar to inheritance however with interfaces only the interface is inherited.
The methods defined by the interface must be implemented in every class that implements
the interface.
•	 Interfaces can be represented using the <<interface>> keyword:
LQWHUIDFH!!
6DOHDEOH,WHP
&DVK7LOO
3XEOLFDWLRQ
There is also a shorthand for this
6DOHDEOH,WHP
3XEOLFDWLRQ
&DVK7LOO
In both cases these examples denote that the SaleableItem interface is required by CashTill and
implemented by Publication.
37
Download free eBooks at bookboon.com
Click on the ad to read moreObject Oriented Programming Using Java
The Unified Modelling Language (UML)
NB the dotted-line version of the inheritance line/arrow which shows that Publication ‘implements’ or
‘realizes’ the SaleableItem interface.
The “ball and socket” notation is new in UML 2 – it is a good visual way of representing how interfaces
connect classes together.
We will look at the application of interfaces in more detail in Chapter 4.
Keywords
UML defines keywords to refine the meaning of the graphical symbols
We have seen <<interface>> and we will also make use of <<abstract>> but there are many more.
An abstract class may alternatively be denoted by showing its name in italics though this is perhaps less
obvious to a casual reader.
Notes
3XEOLFDWLRQ
,QFOXGHVDOOLWHPV
ZLWKDQ,6%1RU
DQ,661
Finally we can add notes to comment on a diagram element. This gives us a ‘catch all’ facility for adding
information not conveyed by the graphical notation.
Activity 4
From your own experience, try to develop a model which illustrates the use of the following
elements of UML Class Diagram notation:
•	
•	
•	
•	
•	
•	
•	
•	
simple association
bidirectional association
aggregation (tricky!)
composition
association multiplicity
generalization (inheritance)
interfaces
notes
For this exercise concentrate on the relationships between classes rather than the details of their
members. Explain and discuss your model with other students and your tutor.
To help you get started some small examples are given below.
38
Download free eBooks at bookboon.comObject Oriented Programming Using Java
The Unified Modelling Language (UML)
In a University administration system we might produce a
transcript of results for each year the student has studied
(including a possible placement year).
6WXGHQW

This association relationship is naturally unidirectional –
given a student we might want to find their transcript(s),
but it seems unlikely that we would have a transcript and
need to find the student to whom it belonged.

7UDQVFULSW
In a library a reader can borrow up to eight books. A
particular book can be borrowed by at most one reader.
5HDGHU

We might want a bidirectional relationship as shown here
because, in addition to being able to identify all the books
which a particular reader has borrowed, we might want to
find the reader who has borrowed a particular book (for
example to recall it in the event of a reservation).

%RUURZHG%RRN
%RG\


+DQG


%DQN$FFRXQW


7KXPE
DEVWUDFW!!
This might be part of the model for some kind of
educational virtual anatomy program.
)LQJHU


&XVWRPHU
Composition – the “strong” relationship which shows
that one object is (and has to be) part of another seems
appropriate here.
The multiplicities would not always work for real people
though – they might have lost a finger due to accident or
disease, or have an extra one because of a genetic anomaly.
And what if we were modelling the “materials” in a medical
school anatomy lab? A hand might not always be part of a
body! Perhaps the “weaker” aggregation relationship would
reflect this better.
A customer can have any number of bank accounts, and
a bank account can be held by one person or two people
(a “joint account”). We have suppressed the navigability of
this relationship, perhaps because we have not yet decided
this issue.
A bank account must either be a current account or a
savings account – hence BankAccount itself is abstract.
&XUUHQW$FFRXQW
6DYLQJV$FFRXQW
(We could have shown this using italics rather than the
<<abstract>> keyword)
Bank Account
39
Download free eBooks at bookboon.comObject Oriented Programming Using Java
LQWHUIDFH!!
&ORFN'LVSOD\
$QDORJ'LVSOD\
&ORFN
The Unified Modelling Language (UML)
Part of a clock is a display to show the time. This might
be an analogue display or a digital display. We could
use a superclass and two subclasses, but since the
implementation of the two displays will be entirely different
it may be more appropriate to use an interface to define
the operations which AnalogDisplay and DigitalDisplay
must provide.
'LJLWDO'LVSOD\
&XVWRPHU
+DVFUHGLW
IDFLOLW\
A note is used here to add some information which cannot
be conveyed with standard UML notation and may not be
obvious simply from the names and relationships of the
classes depicted.
%XVLQHVV&XVWRPHU
Feedback 4
There is no specific feedback for this activity.
WE WILL TURN YOUR CV
INTO AN OPPORTUNITY
OF A LIFETIME
Do you like cars? Would you like to be a part of a successful brand?
As a constructer at ŠKODA AUTO you will put great things in motion. Things that will
ease everyday lives of people all around Send us your CV. We will give it an entirely
new new dimension.
40
Download free eBooks at bookboon.com
Send us your CV on
www.employerforlife.com
Click on the ad to read moreObject Oriented Programming Using Java
2.4	
The Unified Modelling Language (UML)
UML Package Diagrams
While class diagrams are the most commonly used diagram of those defined in UML notation, and we
will make significant use of these throughout this book, there are other diagrams that denote different
types of information. Here we will touch upon three of these:-
•	 Package Diagrams
•	 Object Diagrams and
•	 Sequence Diagrams
World maps, country maps and city maps all show spatial information, just on different scales and with
differing levels of detail. Large OO systems can be made up of hundreds, or potentially thousands, of
classes and thus if the class diagram was the only way to represent the architecture of a large system it
would become overly large and complex. Thus, just as we need world maps, we need package diagrams
to show the general architecture of a large system. Even modest systems can be broken down into a few
basic components i.e. packages. We will see an example of packages in use in Chapter 11. For now we
will just look at the package diagramming notation.
A package is not just a visual representation of a group of classes instead a ‘package’ is a directory
containing a group of related classes (and interfaces). Packages allow us to provide a level of organisation
and encapsulation above that of individual classes and all of the standard Java platform classes are
arranged in a single large package hierarchy. Similarly we can also arrange our own classes using the
Java package mechanism.
Packages are described as a series of dot-separated names, e.g. java.awt.event. The names correspond to
a series of sub-directories in the file system, e.g.
μURRWGLUHFWRU\¶RI
SDFNDJHVWUXFWXUH
QRWRIWKHZKROH
GLVFRUILOHV\VWHP
MDYD
DZW
HYHQW
A large Java development should be split into suitable packages at the design stage UML provides a
‘Package Diagram’ to represent the relationships between classes and packages.
41
Download free eBooks at bookboon.comObject Oriented Programming Using Java
The Unified Modelling Language (UML)
We can depict
•	 classes within packages
•	 nesting of packages
•	 dependencies between packages
In the diagram below we see two packages:- ‘java’ and ‘javax’
MDYD[
MDYD
VZLQJ
DZW
-)UDPH
-&RPSRQHQW
-%XWWRQ
&RQWDLQHU
Looking at this more closely we can see that inside the ‘java’ package is another called ‘awt’ and inside
‘javax’ is a package called ‘swing’.
The package ‘awt’ contains a class ‘Container’ and ‘javax’ contains three classes ‘JFame’, ‘JComponent’
and ‘JButton’. Finally we show that the javax.swing package has dependencies on the java.awt package.
Note that the normal UML principle of suppression applies here – both java.awt and javax.swing contain
many more classes, and ‘java’ contains other sub-packages, but we simply choose not to show them.
In the diagram below we have an alternative way of indicating that a JButton is in the javax.
swing package.
MDYD[VZLQJ-%XWWRQ
And again below a form which shows all three classes more concisely than at the top.
MDYD[VZLQJ
-)UDPH
-&RPSRQHQW
-%XWWRQ
42
Download free eBooks at bookboon.comObject Oriented Programming Using Java
The Unified Modelling Language (UML)
These different representations will be useful in different circumstances depending on what a package
diagram is aiming to convey.
Package Naming
By convention, package names are normally in lowercase
For local individual projects packages could be named according to personal preference, e.g.
mysystem
mysystem.interface
mysystem.engine
mysystem.engine.util
mysystem.database
However, packages are often distributed and to enable this packages need globally unique names, thus
a naming convention has been adopted based on URLs
XNFRHED\ZZZGHSDUWPHQWSURMHFWSDFNDJH
Develop the tools we need for Life Science
Masters Degree in Bioinformatics
Bioinformatics is the
exciting field where biology,
computer science, and
mathematics meet.
We solve problems from
biology and medicine using
methods and tools from
computer science and
mathematics.
Read more about this and our other international masters degree programmes at www.uu.se/master
43
Download free eBooks at bookboon.com
Click on the ad to read moreObject Oriented Programming Using Java
3DUWEDVHGRQRUJDQLVDWLRQ
85/HJZZHED\FRXN
UHYHUVHGWKRXJKWKLVGRHV
QRWVSHFLILFDOO\LPSO\
\RXFDQGRZQORDGWKH
FRGHWKHUH
The Unified Modelling Language (UML)
3DUWGLVWLQJXLVKLQJWKHSDUWLFXODU
SURMHFWDQGFRPSRQHQWRUVXEV\VWHP
ZKLFKWKLVSDFNDJHFRQWDLQV
Note on a package diagram each element is not separated by a ‘.’ but by ‘::’.
Activity 5
You and a flatmate decide to go shopping together. For speed split the following
shopping list into two halves – items to be collected by you and items to be collected
by your flatmate.
Apples, Furniture polish, Pears, Carrots, Toilet Rolls, Potatoes, Floor cleaner.
Matches, Grapes
Feedback 5
To make your shopping efficient you probably organised your list into two lists of
items that are located in the same parts of the shop:-
List 1		
Apples, 		
Pears, 		
Grapes		
Carrots, 		
Potatoes
List 2
Furniture polish,
Floor cleaner
Matches
Toilet Rolls,
Activity 6
You run a team of three programmers and are required to write a program in Java to
monitor and control a network system. The system will be made up of seven classes
as described below. Organise these classes into three packages. Each programmer will
then be responsible for the code in one package. Give the packages any name you
feel appropriate.
Main 		
this class starts the system
Monitor 		this class monitors the network for performance and breaches
in security
Interface 		
this is a visual interface for entire system
Reconfigure 	
this allows the network to be reconfigured
RecordStats	
this stores data regarding the network in a database
RemoteControl	 this allows some remote control over the system via telephone
PrintReports 	this uses the data stored in the database to print management
reports for the organisations management.
44
Download free eBooks at bookboon.comObject Oriented Programming Using Java
The Unified Modelling Language (UML)
Feedback 6
When organising a project into packages there is not always ‘one correct answer’ but
if you organise your classes into appropriate packages (with classes that have related
functionality) you improve the encapsulation of the system and improve the efficiency
of your programmers. A suggested solution to activity 6 is given below.
interface
	Main
	Interface
	RemoteControl
network
	
Monitor 	
	Reconfigure
database
	RecordStats
	PrintReports
Activity 7
Assume the URL of your organisation is ‘www.myorg.com’ and the three packages
and seven classes shown below are all part of ‘project1’. Draw a package diagram to
convey this information.
interface
	Main
	Interface
	RemoteControl
network
	Monitor
	Reconfigure
database
	RecordStats
	PrintReports
45
Download free eBooks at bookboon.comObject Oriented Programming Using Java
The Unified Modelling Language (UML)
Feedback 7
FRPP\RUJZZZSURMHFW
QHWZRUN
LQWHUIDFH
0DLQ
,QWHUIDFH
5HPRWH&RQWURO
0RQLWRU
5HFRQILJXUH
GDWDEDVH
5HFRUG6WDWV
3ULQW5HSRUWV
Note: Dependency arrows have been drawn to highlight relationships between
packages. When more thought has been put into determining these relationships
they may turn out to be associations (a much stronger relationship than a
mere dependency).
Copenhagen
Master of Excellence
cultural studies
Copenhagen Master of Excellence are
two-year master degrees taught in English
at one of Europe’s leading universities
religious studies
Come to Copenhagen - and aspire!
Apply now at
www.come.ku.dk
science
46
Download free eBooks at bookboon.com
Click on the ad to read moreObject Oriented Programming Using Java
2.5	
The Unified Modelling Language (UML)
UML Object Diagrams
Class diagrams and package diagrams allow us to visualise and discuss the architecture of a system
however at times we wish to discuss the data a system processes. Object diagrams allow us to visual one
instance of time and the data that a system may contain in that moment.
Object diagrams look superficially similar to class diagrams however the boxes represent specific instances
of objects.
Boxes are titled with:- 	
objectName: ClassName
As each box describes a particular object at a specific moment in time the box contains attributes and
their values (at that moment in time).
attribute = value
These diagrams are useful for illustrating particular ‘snapshot’ scenarios during design.
The object diagram below shows several object that may exist at a moment in time for a library catalogue
system. The system contains two classes:-
Book, which store the details of a book and
Library, which maintains a collection of books. With books being added, searched for or
removed as required.
P\/RFDO/LEUDU\/LEUDU\
ERRN%RRN
WLWOH 3223URJUDPPLQJ8VLQJ
-DYD ́
DXWKRU 36.HQGDO ́
ERRN%RRN
WLWOH 3)LVKLQJ0DGH6LPSOH ́
DXWKRU 3$7URXW ́
ERRN%RRN
WLWOH 3&RRNLQJIRU%HJLQQHUV ́
DXWKRU 3$&KHI ́
Looking at this diagram we can see that at a particular moment in time, while three books have been
created only two have been added to the library. Thus if we were to search the library for ‘Cooking for
Beginners’ we would not expect the book to be found.
As with class diagrams, elements can be freely suppressed on object diagrams.
47
Download free eBooks at bookboon.comObject Oriented Programming Using Java
The Unified Modelling Language (UML)
For example, all of these are legal:
ERRN%RRN
VXSSUHVVVRPHDWWULEXWHV
WLWOH 3223URJUDPPLQJ8VLQJ-DYD ́
VXSSUHVVDOODWWULEXWHV
ERRN%RRN
VXSSUHVVREMHFWQDPH
%RRN
2.6	
UML Sequence Diagrams
Sequence diagrams are entirely different from class diagrams or object diagrams. Class diagrams describe
the architecture of a system and object diagrams describe the state of a system at one moment in time.
However sequence diagrams describe how the system works over a period of time. Sequence diagrams
are ‘dynamic’ rather than ‘static’ representations of the system. They show the sequence of method
invocations within and between objects over a period of time. They are useful for understanding how
objects collaborate in a particular scenario.
See the example below:-
REMHFW&ODVV
PHWKRG
REMHFW&ODVV
REMHFW&ODVV
PHWKRG
PHWKRGSDUSDU
PHWKRG
UHWXUQYDOXH
PHWKRG
48
Download free eBooks at bookboon.comObject Oriented Programming Using Java
The Unified Modelling Language (UML)
We have three objects in this scenario. Time runs from top to bottom, and the vertical dashed lines
(lifelines) indicate the objects’ continued existence through time.
This diagram shows the following actions taking place:-
•	 Firstly a method call (often referred to in OO terminology as a message) to method0()
comes to object1 from somewhere – this could be another class outside the diagram.
•	 object1 begins executing its method0() (as indicated by the vertical bar (called an activation
bar) which starts at this point.
•	 object1.method0() invokes object2.method1() – the activation bar indicates that this
executes for a period then returns control to method0()
•	 Subsequently object1.method0() invokes object2.method2() passing two parameters
•	 method2() subsequently invokes object3.method3(). When method3() ends it passes a
return value back to method2()
•	 method2() completes and returns control to object1.method0()
•	 Finally method0() calls another method of the same object, method4()
Selection and Iteration
The logic of a scenario often depends on selection (‘if ’) and iteration (loops).
There is a notation (‘interaction frames’) which allow ifs and loops to be represented in sequence diagrams
however these tend to make the diagrams cluttered.
Sequence diagrams are generally best used for illustrating particular cases, with the full refinement
reserved for the implementation code.
Fowler (“UML Distilled”, 3rd Edn.) gives a brief treatment of these constructs.
49
Download free eBooks at bookboon.comObject Oriented Programming Using Java
The Unified Modelling Language (UML)
2.7	Summary
UML is not a methodology but a precise diagramming notation.
Class diagrams and package diagrams are good for describing the architecture of a system. Object
diagrams describe the data within an application at one moment in time and sequence diagrams describe
how a system works over a period of time.
UML gives different meaning to different arrows therefore one must be careful to use the notation
precisely as specified.
With any UML diagram suppression is encouraged – thus the author of a diagram can suppress any
details they wish in order to convey essential information to the reader.
Brain power
By 2020, wind could provide one-tenth of our planet’s
electricity needs. Already today, SKF’s innovative know-
how is crucial to running a large proportion of the
world’s wind turbines.
Up to 25 % of the generating costs relate to mainte-
nance. These can be reduced dramatically thanks to our
systems for on-line condition monitoring and automatic
lubrication. We help make it more economical to create
cleaner, cheaper energy out of thin air.
By sharing our experience, expertise, and creativity,
industries can boost performance beyond expectations.
Therefore we need the best employees who can
meet this challenge!
The Power of Knowledge Engineering
Plug into The Power of Knowledge Engineering.
Visit us at www.skf.com/knowledge
50
Download free eBooks at bookboon.com
Click on the ad to read moreObject Oriented Programming Using Java
Inheritance and Method Overriding
3	Inheritance and
Method Overriding
Introduction
This chapter will discuss the essential concepts of Inheritance, method overriding and the appropriate
use of ‘Super’.
Objectives
By the end of this chapter you will be able to...
•	 Appreciate the importance of an Inheritance hierarchy,
•	 Understand how to use Abstract classes to factor out common characteristics
•	 Override methods (including those in the ‘Object’ class),
•	 Explain how to use ‘Super’ to invoke methods that are in the process of being overridden,
•	 Document an inheritance hierarchy using UML and
•	 Implement inheritance and method overriding in Java programs.
All of the material covered in this chapter will be developed and expanded on in later chapters of
this book. While this chapter will focus on understanding the application and documentation of an
inheritance hierarchy, Chapter 6 will focus on developing the analytical skills required to define your
own inheritance hierarchies.
This chapter consists of twelve sections:-
1)	 Object Families
2)	 Generalisation and Specialisation
3)	 Inheritance
4)	 Implementing Inheritance in Java
5)	 Constructors
6)	 Constructor Rules
7)	 Access Control
8)	 Abstract Classes
9)	 Overriding Methods
10)	 The ‘Object’ Class
11)	 Overriding toString() defined in ‘Object’
12)	 Summary
51
Download free eBooks at bookboon.comObject Oriented Programming Using Java
3.1	
Inheritance and Method Overriding
Object Families
Many kinds of things in the world fall into related groups of ‘families’. ‘Inheritance’ is the idea ‘passing
down’ characteristics from parent to child, and plays an important part in Object Oriented design
and programming.
While you are probably already familiar with constructors and access control (public/private), and there
are particular issues in relating these to inheritance.
Additionally we need to consider the use of Abstract classes and method overriding as these are important
concepts in the context of inheritance.
Finally we will look at the ‘Object’ class which has a special role in relation to all other classes in Java.
3.2	
Generalisation and Specialisation
Classes are a generalized form from which objects with differing details can be created. Objects are thus
‘instances’ of their class. For example Student 051234567 is an instance of class Student. More concisely,
051234567 is a Student.
Classes themselves can often be organised by a similar kind of relationship.
One hierarchy, that we all have some familiarity with, is that which describes the animal kingdom:-
•	 Kingdom 	 (e.g. animals)
•	 Phylum	 (e.g. vertebrates)
•	 Class		 (e.g. mammal)
•	 Order		 (e.g. carnivore)
•	 Family	 (e.g. cat)
•	 Genus		 (e.g. felix)
•	 Species	 (e.g. felix leo)
We can represent this hierarchy graphically...
52
Download free eBooks at bookboon.comObject Oriented Programming Using Java
Inheritance and Method Overriding
2UJDQLVP
$QLPDO
9HUWHEUDWH
0DPPDO
&DUQLYRUH
&DW
)HOL[
)HOL[/HR
)UHG
Trust and responsibility
NNE and Pharmaplan have joined forces to create
NNE Pharmaplan, the world’s leading engineering
and consultancy company focused entirely on the
pharma and biotech industries.
– You have to be proactive and open-minded as a
newcomer and make it clear to your colleagues what
you are able to cope. The pharmaceutical fi eld is new
to me. But busy as they are, most of my colleagues
fi nd the time to teach me, and they also trust me.
Even though it was a bit hard at fi rst, I can feel over
time that I am beginning to be taken seriously and
that my contribution is appreciated.
Inés Aréizaga Esteva (Spain), 25 years old
Education: Chemical Engineer
NNE Pharmaplan is the world’s leading engineering and consultancy company
focused entirely on the pharma and biotech industries. We employ more than
1500 people worldwide and offer global reach and local knowledge along with
our all-encompassing list of services.
nnepharmaplan.com
53
Download free eBooks at bookboon.com
Click on the ad to read moreObject Oriented Programming Using Java
Inheritance and Method Overriding
Of course to draw the complete diagram would take more time and space than we have available.
Here we can see one specific animal shown here:- ‘Fred’. Fred is not a class of animal but an actual animal.
Fred is a felix leo is a felix is a cat is a carnivore
Carnivores eat meat so Fred has the characteristic ‘eats meat’.
Fred is a felix leo is a felix is a cat is a carnivore is a mammal is a vertebrate
Vertebrates have a backbone so Fred has the characteristic ‘has a backbone’.
The ‘is a’ relationship links an individual to a hierarchy of characteristics. This sort of relationship applies
to many real world entities, e.g. BonusSuperSaver is a SavingsAccount is a BankAccount.
3.3	Inheritance
We specify the general characteristics high up in the hierarchy and more specific characteristics lower
down. An important principle in OO – we call this generalization and specialization.
All the characteristics from classes above a class/object in the hierarchy are automatically featured in
it – we call this inheritance.
Consider books and magazines – both specific types of publication.
We can show classes to represent these on a UML class diagram. In doing so we can see some of the
instance variables and methods these classes may have.
0DJD]LQH
%RRN
WLWOH
SULFH
RUGHU4W\
FXUU,VVXH
FRSLHV
WLWOH
DXWKRU
SULFH
FRSLHV
VHOO&RS\
RUGHU&RSLHV
VHOO&RS\
DGMXVW4W\
UHFY1HZ,VVXH
54
Download free eBooks at bookboon.comObject Oriented Programming Using Java
Inheritance and Method Overriding
Attributes ‘title’, ‘author’ and ‘price’ are obvious. Less obvious is ‘copies’ this is how many are currently
in stock.
For books, orderCopies() takes a parameter specifying how many copies are added to stock.
For magazines, orderQty is the number of copies received of each new issue and currIssue is the date/
period of the current issue (e.g. “January 2009”, “Fri 6 Jan”, “Spring 2009” etc.) When a newIssue is
received the old are discarded and orderQty copies are placed in stock. Therefore recvNewIssue() sets
currIssue to date of new issue and restores copies to orderQty. adjustQty() modifies orderQty to alter
how many copies of subsequent issues will be stocked.
Activity 1
Look at the ‘Book’ and ‘Magazine’ classes defined above and identify the
commonalities and differences between two classes.
Activity 1
Look at the ‘Book’ and ‘Magazine’ classes defined above and identify the
commonalities and differences between two classes.
Feedback 1
These classes have three instance variables in common: title, price, copies.
They also have in common the method sellCopy().
The differences are as follows...
Book additionally has author, and orderCopies().
Magazine additionally has orderQty, currIssue, adjustQty() and recvNewIssue().
We can separate out (‘factor out’) these common members of the classes into a superclass called
Publication.
3XEOLFDWLRQ
WLWOH
SULFH
FRSLHV
VHOO&RS\
55
Download free eBooks at bookboon.comObject Oriented Programming Using Java
Inheritance and Method Overriding
The differences will need to be specified as additional members for the ‘subclasses’ Book and Magazine.
3XEOLFDWLRQ
WLWOH
SULFH
FRSLHV
VHOO&RS\
%RRN
0DJD]LQH
DXWKRU RUGHU4W\
FXUU,VVXH
RUGHU&RSLHV DGMXVW4W\
UHFY1HZ,VVXH
This e-book
is made with
SETASIGN
SetaPDF
PDF components for PHP developers
www.setasign.com
56
Download free eBooks at bookboon.com
Click on the ad to read moreObject Oriented Programming Using Java
Inheritance and Method Overriding
In this is a UML Class Diagram.
The hollow-centred arrow denotes inheritance.
Note the Subclass has the generalized superclass characteristics + additional specialized characteristics.
Thus the Book class has four instance variables (title, price, copies and author) it also has two methods
(sellCopy() and orderCopies()).
The inherited characteristics are NOT listed in subclasses. The arrow shows they are acquired
from superclass.
Activity 2
Arrange the following classes into a suitable hierarchy and draw these on a
class diagram...
a current account
a deposit account
a bank account
Simon’s deposit account
Feedback 2
Bank Account
Current Account
Deposit Account
The most general class goes at the top of the inheritance hierarchy with the other
classes then inheriting the attributes and methods of this class.
Simon’s deposit account should not be shown on a class diagram as this is a specific
instance of a class i.e. it is an object.
57
Download free eBooks at bookboon.comObject Oriented Programming Using Java
Inheritance and Method Overriding
Activity 3
Arrange the following classes into a suitable hierarchy and draw these on a
class diagram...
a building
a house
a car
Feedback 3
Building
House
Car
A house is a type of building and can therefore inherit the attributes of building
however this is not true of a car. We cannot place two classes in an inheritance
hierarchy unless we can use the term is a.
Note class names, as always, begin in uppercase.
Activity 4
Describe the following using a suitable class diagram showing ANY
sensible relationship...
a building for rent
this will have a method to determine the rent
a house for rent
this will inherit the determine rent method
a rent collector (person)
this person will use the determine rent method to print out a bill
HINT: You may wish to use the following arrow
58
Download free eBooks at bookboon.comObject Oriented Programming Using Java
Inheritance and Method Overriding
Feedback 4
Building
determineRent()
RentCollector
printBill()
House
Note: RentCollector does not inherit from Building as a RentCollector is a person
not a type of Building. However there is a relationship (an association) between
RentCollector and Building ie. a RentCollector needs to determine the rent for a
Building in order to print out the bill.
Activity 5
Looking at the feedback from Activity 4 and determine if a RentCollector can print out
a bill for the rent due on a house (or can they just print a bill for buildings?).
Feedback 5
Firstly to print out a bill a RentCollector would need to know the rent due. There is
no method determineRent() defined for a house – but this does not mean it does
not exist.
It must exist as House inherits the properties of Building!
We only show methods in subclasses if they are either additional methods or methods
that have been overridden.
A rent collector requires a building but a House is a type of a Building. So, while no
association is shown between the RentCollector and House, a Rentcollector could
print a bill for a house. Wherever a Building object is required we could substitute a
House object as this is a type of Building. This is an example of polymorphism and we
will see other examples of this in Chapter 4.
59
Download free eBooks at bookboon.comObject Oriented Programming Using Java
Inheritance and Method Overriding
Activity 6
Modify this UML diagram to show that determineRent() is overridden in House.
%XLOGLQJ
GHWHUPLQH5HQW
5HQW&ROOHFWRU
SULQW%LOO
+RXVH
Sharp Minds - Bright Ideas!
The Family owned FOSS group is
Employees at FOSS Analytical A/S are living proof of the company value - First - using
new inventions to make dedicated solutions for our customers. With sharp minds and
cross functional teamwork, we constantly strive to develop new unique products -
Would you like to join our team?
the world leader as supplier of
dedicated, high-tech analytical
solutions which measure and
control the quality and produc-
FOSS works diligently with innovation and development as basis for its growth. It is
reflected in the fact that more than 200 of the 1200 employees in FOSS work with Re-
search & Development in Scandinavia and USA. Engineers at FOSS work in production,
development and marketing, within a wide range of different fields, i.e. Chemistry,
Electronics, Mechanics, Software, Optics, Microbiology, Chemometrics.
tion of agricultural, food, phar-
maceutical and chemical produ-
cts. Main activities are initiated
from Denmark, Sweden and USA
with headquarters domiciled in
Hillerød, DK. The products are
We offer
A challenging job in an international and innovative company that is leading in its field. You will get the
opportunity to work with the most advanced technology together with highly skilled colleagues.
Read more about FOSS at www.foss.dk - or go directly to our student site www.foss.dk/sharpminds where
you can learn more about your possibilities of working together with us on projects, your thesis e tc.
marketed globally by 23 sales
companies and an extensive net
of distributors. In line with
the corevalue to be ‘First’, the
company intends to expand
its market position.
Dedicated Analytical Solutions
FOSS
Slangerupgade 69
3400 Hillerød
Tel. +45 70103370
www.foss.dk
60
Download free eBooks at bookboon.com
Click on the ad to read moreObject Oriented Programming Using Java
Inheritance and Method Overriding
Feedback 6
%XLOGLQJ
GHWHUPLQH5HQW
5HQW&ROOHFWRU
SULQW%LOO
+RXVH
GHWHUPLQH5HQW
By showing determineRent() in House we are showing that this method is overriding
the one defined in the superclass (Building).
Interestingly Java will use the most correct determineRent() method depending
upon which type of object the method is invoked on. Thus RentCollector will invoke
the method defined in House if printing a bill for a house but will use the method
defined in Building for any other type of building. This is automatic – the code in the
RentCollector class does not distinguish between different types of Building.
Overriding will be discussed in more detail later in this chapter.
3.4	
Implementing Inheritance in Java
No special features are required to create a superclass. Thus any class can be a superclass unless
specifically prevented.
A subclass specifies it is inheriting features from a superclass using the keyword extends. For example...
class MySubclass extends MySuperclass

// additional instance variables and
// additional methods
3.5	Constructors
Each class (whether sub or super) should encapsulate its own initialization, usually relating to setting
the initial state of its instance variables.
A constructor for a superclass should deal with general initialization.
61
Download free eBooks at bookboon.comObject Oriented Programming Using Java
Inheritance and Method Overriding
Each subclass can have its own constructor for specialised initialization but it must often invoke the
behaviour of the superclass constructor. It does this using the keyword super.
class MySubClass extends MySuperClass
{
	
public MySubClass (sub-parameters)
	
// other initialization
If super is called, ie. the superclass constructor, then this must be the first statement in the constructor.
Usually some of the parameters passed to MySubClass will be initializer values for superclass instance
variables, and these will simply be passed on to the superclass constructor as parameters. In other words
super-parameters will be some (or all) of sub-parameters.
Shown below are two constructors, one for the Publication class and one for Book. The book constructor
requires four parameters three of which are immediately passed on to the superclass constructor to
initialize its instance variables.
public Publication (String pTitle, double pPrice, int pCopies)

	
	
title = pTitle;
// etc.
public Book (String pTitle, String pAuthor, double pPrice,

3.6	
author = pAuthor;
Constructor Rules
Rules exist that govern the invocation of a superconstructor.
If the superclass has a parameterless (or default) constructor this will be called automatically if no
explicit call to super is made in the subclass constructor though an explicit call is still better style for
reasons of clarity.
62
Download free eBooks at bookboon.comObject Oriented Programming Using Java
Inheritance and Method Overriding
However if the superclass has no parameterless constructor but does have a parameterized one, this
must be called explicitly using super.
To illustrate this...
0\6XSHU&ODVV
0\6XSHU&ODVV
0\6XSHU&ODVV
0\6XSHU&ODVV
0\6XSHU&ODVV[
0\6XSHU&ODVV
0\6XSHU&ODVV[
0\6XE&ODVV
0\6XE&ODVV 0\6XE&ODVV
0\6XE&ODVV
FDQFDOOVXSHU 0\6XE&ODVV
PXVWFDOOVXSHU
On the left above:- it is legal, though bad practice, to have a subclass with no constructor because
superclass has a parameterless constructor.
63
Download free eBooks at bookboon.com
Click on the ad to read moreObject Oriented Programming Using Java
Inheritance and Method Overriding
In the centre:- if subclass constructor doesn’t call super, the parameterless superclass constructor will
be called.
On the right:- because superclass has no paramterless constructor, subclass must have a constructor and
it must call super. This is simply because a (super) class with only a parameterized constructor can only
be initialized by providing the required parameter(s).
3.7	
Access Control
To enforce encapsulation we normally make instance variables private and provide accessor/mutator
methods as necessary.
The sellCopy() method of Publication needs to alter the value of the variable ‘copies’ it can do this even
if ‘copies’ is a private variable. However Book and Magazine both need to alter ‘copies’.
There are two ways we can do this...
1)	 make ‘copies’ ‘protected’ rather than ‘private’ – this makes it visible to subclasses, or
2)	 create accessor and mutator methods.
For variables we generally prefer to create accessors/mutators rather than compromise encapsulation
though protected may be useful to allow subclasses to use methods (e.g. accessors and mutators) which
we would not want generally available to other classes.
Thus in the superclass Publication we define ‘copies’ as a variable private but create two methods that
can set and access the value ‘copies’. As these accessor methods are public or protected they can be used
within a subclass when access to ‘copies’ is required.
In the superclass Publication we would therefore have...
private int copies;
public int getCopies ()

return copies;
public void setCopies(int pCopies)

copies = pCopies;
64
Download free eBooks at bookboon.comObject Oriented Programming Using Java
Inheritance and Method Overriding
These methods allow superclass to control access to private instance variables.
As currently written they don’t actually impose any restrictions, but suppose for example we wanted to
make sure ‘copies’ is not set to a negative value.
a)	 If ‘copies’ is private, we can put the validation (i.e. an if statement) within the setCopies
method here and know for sure that the rule can never be compromised
b)	 If ‘copies’ is partially exposed as protected, we would have to look at every occasion
where a subclass method changed the instance variable and do the validation at each
separate place.
We might even consider making these methods protected rather than public themselves so their use is
restricted to subclasses only and other classes cannot interfere with the value of ‘copies’.
Making use of these methods in the sublasses Book and Magazine we have...
// in Book
public void orderCopies(int pCopies)

setCopies(getCopies() + pCopies);
// and in Magazine
public void recvNewIssue(String pNewIssue)

	
	
setCopies(orderQty);
currIssue = pNewIssue;
These statements are equivalent to
	
mCopies = mCopies + pCopies
and
	
3.8	
mCopies = mOrderQty
Abstract Classes
The idea of a Publication which is not a Book or a Magazine is meaningless, just like the idea of a Person
who is neither a MalePerson nor a FemalePerson. Thus while we are happy to create Book or Magazine
objects we may want to prevent the creation of objects of type Publication.
65
Download free eBooks at bookboon.comObject Oriented Programming Using Java
Inheritance and Method Overriding
If we want to deal with a new type of Publication which is genuinely neither Book nor Magazine – e.g.
a Calendar – it would naturally become another new subclass of Publication.
As Publication will never be instantiated ie. we will never create objects of this type the only purpose
of the class exists is to gather together the generalized features of its subclasses in one place for them
to inherit.
We can enforce the fact that Publication is non-instantiable by declaring it ‘abstract’:-
abstract class Publication

The code above shows the creation of the Map and the other methods required by the ClientBook class.
205
Download free eBooks at bookboon.comObject Oriented Programming Using Java
Case Study
11.10	 Creating and Handling UnknownClientException
The getClient() method in the ClientBook class will return a null value if no client exists with the
specified ID. In such a case during the daily purge our program will crash as we try to invoke the
decreaseCredit() method without having a client object to invoke this method on (it will crash with a
NullPointerException).
We therefore need to build in protection against this eventuality. To protect against this we need to:-
•	 Create a new kind of exception (as described in Chapter 9) called UnknownClientException
•	 tell the ClientBook class to throw this exception if a client is not found
•	 catch and deal with this exception in the dailyPurge() method.
The first step is simple and not shown here.
Copenhagen
Master of Excellence
cultural studies
Copenhagen Master of Excellence are
two-year master degrees taught in English
at one of Europe’s leading universities
religious studies
Come to Copenhagen - and aspire!
Apply now at
www.come.ku.dk
science
206
Download free eBooks at bookboon.com
Click on the ad to read moreObject Oriented Programming Using Java
Case Study
Telling the getClient() method and deleteClient() method to generate this exception is relatively straight
forward (as shown below):-
public Client getClient(String pClientID)
						 throws UnknownClientException 
Firstly we must tell the compiler that this method can generate an exception. Then, under the appropriate
condition, we invoke the constructor of the exception using the keyword ‘new’ and pass a string message
required by the constructor. The object returned by the constructor is then ‘thrown’.
To be helpful the string specifies the method where this exception was generated from and the clientID
for which a client was not found.
The compiler will then ensure that the programmer writing the dailyPurge() method catches this
exception – hopefully they will then deal with it to prevent a crash situation.
The final step is to catch and deal with UnkownClientException within the dailyPurge() method – as
shown in section 11.8 (Programming the Message Classes).
If a client does not exist we may could remove the message. However in this case we have chosen to be
more cautious since we simply don’t know how we have come to have an ‘unowned’ message.
We have therefore decided that if the message has not expired we will not to take any action other than
to report the error. The message will continue to be displayed (even without having a client to charge!).
If an unowned message has expired we of course still need to remove it from the display set.
207
Download free eBooks at bookboon.comObject Oriented Programming Using Java
Case Study
11.11	 Programming the Main classes
There are two classes, not shown on the class diagrams given previously, that ‘drive’ the system.
‘Manager’ is the main class that manages the system. It performs the following functions:-
•	 it has a permanent reference to the client book and message set.
•	 it sets up the data file
•	 it defines what happens when the system starts and
•	 it defines what happens when the system shuts down
•	 finally it has getClientBook() and getMessageSet() methods so the other parts of the system
can access the clientbook and message set.
The startup() method is shown below:-
public void startUp() 
The startup() method tries to setup an Object Input stream from which it then tries to reconstruct
ClientBook and MessageSet objects.
It has two catch blocks. The first will catch a FileNotFoundException – this will occur if the file of data
cannot be found e.g. the first time this program is run. In such a case the system will create a new and
empty ClientBook object and a new MessageSet object.
The second catch block will catch any other IO error and in this case will then exit the program.
208
Download free eBooks at bookboon.comObject Oriented Programming Using Java
Case Study
11.12	 Programming the Interface
The other driving class is GUImain. This has a main() method which invokes the createGUI() method.
This creates three JPanels and adds buttons, text boxes and labels to these according to the preliminary
design. A Grid layout manager was applied to these JPanels (as described in section 10 of chapter 8).
The GUImain class also defines action listeners for each of the buttons on the GUI.
Shown below is the action listener associated with the FindClient button:
private class FindClientListener implements ActionListener 
Brain power
By 2020, wind could provide one-tenth of our planet’s
electricity needs. Already today, SKF’s innovative know-
how is crucial to running a large proportion of the
world’s wind turbines.
Up to 25 % of the generating costs relate to mainte-
nance. These can be reduced dramatically thanks to our
systems for on-line condition monitoring and automatic
lubrication. We help make it more economical to create
cleaner, cheaper energy out of thin air.
By sharing our experience, expertise, and creativity,
industries can boost performance beyond expectations.
Therefore we need the best employees who can
meet this challenge!
The Power of Knowledge Engineering
Plug into The Power of Knowledge Engineering.
Visit us at www.skf.com/knowledge
209
Download free eBooks at bookboon.com
Click on the ad to read moreObject Oriented Programming Using Java
Case Study
This action listener does the following:-
•	 It opens a dialog box to ask the user for a clients ID,
•	 If cancel is pressed it replaces the null returned with an ID of “”.
•	 It then asks the manager object to return the client book.
•	 On the client book object it invokes the getClient() method passing the ID as a parameter
•	 Assuming a client is returned the toString() method is then invoked to get a string
representation of the client and this is passed as a parameter to the showMessageDialog()
method (which displays the details of the client with that ID).
•	 If getClient() fails to find a client this method will throw an UnknownclientException – this
will be caught here and an appropriate message will be displayed.
11.13	 Using Test Driven Development and Extending the System
Now we have a working system – though two important methods have yet to be created. We need
a method to increase a clients credit – this should be placed within the Client class. We also need a
method to delete a client – as this means removing them from the client book this should be placed in
the ClientBook class.
It has been decided to use Test Driven Development to extend the system by providing this functionality
(as discussed in Chapter 10 Agile Programming).
In TDD we must:-
1)	 Write tests
2)	 Set up automated unit testing, which fails because the classes haven’t yet been written!
3)	 Write the classes so the tests pass
After creating these methods we must then adapt the interface so that this will invoke these methods.
210
Download free eBooks at bookboon.comObject Oriented Programming Using Java
Case Study
Two test cases are given below:-
public void testIncreaseCredit() 
public void testDeleteClient() 
The first of these creates a client with 10 units of credit, adds an additional 10 units of credit and then
checks that this client has 20 units of credit.
One test does alone not sufficiently prove that the increaseCredit() method will always work so we made
need to define additional tests.
The second test creates and empty client book, creates a client, adds the client to the client book and
tries to delete this client – if at this point an unknownClientexception is generated then we know there
is a problem. Once deleted we try to delete the object for a second time and this should fail as an
unkownClientException should now be generated. If an exception is not generated at this point then
the class is flawed and the test should ‘fail’.
Having created test cases these will generate complier errors as the methods increaseCredit() and
deleteClient() do not exist.
We must now create the methods and revise them until these tests pass.
The increaseCredit() method is given below...
public void increaseCredit(int pExtraCredit) 
211
Download free eBooks at bookboon.comObject Oriented Programming Using Java
Case Study
Theory suggest that TDD leads to simple code.
In this case by focusing our minds on what the increaseCredit() method needs to achieve we reduce the
risk of over complicating the code. Of course we may need a range of test case to make sure the method
has all of the essential functionality it needs.
11.14	 Generating Javadoc
Documentation is essential and can be generated automatically (as described in Chapter 8 – Java
Development Tools) assuming appropriate comments have been placed in the code.
Javadoc comments have been placed in the code to describe all classes, all constructors and all methods.
All parameters and return values have been described.
Three of the comments taken from the Client class are shown below:-
/*************************************************************
* A customer of the message display service
*
* @author Simon Kendal
* @version 1.0 (26 June 2009)
***********************************************************/
public class Client implements Serializable {
	
... lines missing ...
	/**
	
* Constructor
	
*
	
* @param pName name of client
	
* @param pAddress client's address
	
* @param pPhone client's phone number
	
* @param pCredit initial credit for client
	
*/
	
public Client(String pName, String pAddress, String pPhone,
									int pCredit) {
	
... lines missing ...
	/**
	
* return the client's current credit
	
*
	
* @return credit units remaining
	
*/
	
public int getCredit() 
212
Download free eBooks at bookboon.comObject Oriented Programming Using Java
Case Study
Once Javadoc style comments have been placed throughout the code initiating the javadoc tool will
generate a set of web pages to describe the system (in Eclipse this is done by selecting Project | Generate
Javadoc menu items).
The following picture shows part of the Java documentation describing the UrgentMessage class:-
11.15	 Running the System and Potential Compiler Warnings
The complete program, as described in this chapter, is available with this textbook as an exported Eclipse
project. To run this program:-
•	 Download the file ‘OOP Using Java’
•	 Import it into Eclipse by selecting File | Import | Existing Project Into Workspace | Select
Archive File ‘OOP Using Java’ and then select the Message Management System project that
is inside the archive file.
•	 Using the Eclipse package explorer window, right click on the GUImain class which is inside
the package ‘main’ and select ‘Run as Java application’.
In this exported file are all classes, methods and test cases discussed in this chapter along with the
Javadoc generated by the Javadoc tool. To view the Javadoc go to the .doc folder and double click on
the index.html page.
213
Download free eBooks at bookboon.comObject Oriented Programming Using Java
Case Study
When examining this program, depending upon your compiler settings, you may notice some warning
messages. One in particular that you are likely to see refers to the serializable classes (MessageSet, Message
etc) as I have not given them version numbers.
These warnings should have no impact on running the system and can be switched of if required by
going to Window | Preferences |Compiler | Errors & Warnings and selecting ignore for those warnings
you wish to suppress (as shown below).
11.16	 The Finished System...
The following screen shots show the finished system.
Firstly the main interface window – this is very similar to the design. The only change was one extra
button that was added to allow a message to be designated as an urgent message.
214
Download free eBooks at bookboon.comObject Oriented Programming Using Java
Case Study
The next two images show the pop up dialogues that appear when the ‘Find Client’ button is pressed.
Firstly asking for a client ID...
Secondly displaying the client details – assuming a client with this ID has been added.
Trust and responsibility
NNE and Pharmaplan have joined forces to create
NNE Pharmaplan, the world’s leading engineering
and consultancy company focused entirely on the
pharma and biotech industries.
Inés Aréizaga Esteva (Spain), 25 years old
Education: Chemical Engineer
– You have to be proactive and open-minded as a
newcomer and make it clear to your colleagues what
you are able to cope. The pharmaceutical fi eld is new
to me. But busy as they are, most of my colleagues
fi nd the time to teach me, and they also trust me.
Even though it was a bit hard at fi rst, I can feel over
time that I am beginning to be taken seriously and
that my contribution is appreciated.
NNE Pharmaplan is the world’s leading engineering and consultancy company
focused entirely on the pharma and biotech industries. We employ more than
1500 people worldwide and offer global reach and local knowledge along with
our all-encompassing list of services.
nnepharmaplan.com
215
Download free eBooks at bookboon.com
Click on the ad to read moreObject Oriented Programming Using Java
Case Study
The ‘Display Messages’ button shows each of the messages on the screen that should be display using the
DummyBoard class. This is only crudely simulating a real display board and makes no effort to scroll
the messages or display them in any graphically interesting way.
‘Purge Messages’ invokes the purgeMessages() method. It does nothing visible but decrements the days
remaining for each message, decreases the clients credits and deletes the messages if appropriate. This
can be tested by running Find Client before and after doing a daily purge.
11.17	Summary
The fundamental principles of the Object Orientated development paradigm are
•	 abstraction
•	 encapsulation
•	 generalization/specialization (inheritance)
•	 polymorphism
These principles are ubiquitous throughout the Java language and library package APIs as well as providing
a framework for our own software development projects.
A well-established range of tools and reference support is available for OO development in Java, some
of it allied to modern ‘agile’ development approaches.
Throughout this chapter you will hopefully have seen how Object Orientation supports the programmer by:-
•	 using abstraction and encapsulation to enables us to focus on and program different parts of
a complex system without worrying about ‘the whole’.
•	 using inheritance to ‘factor out’ common code
•	 using polymorphism to make programs easier to change
•	 using tools help document and manage large software projects.
This has been exemplified using Java but the same principles and benefits apply to all OO programming
languages and the tools demonstrated here are available in many modern IDE’s.
Through reading this book, and doing the small exercises, you will hopefully have gained some
understanding of these principles.
I hope you have found this book helpful and I wish you all the best for the future.
216
Download free eBooks at bookboon.com